{
    "!": 0,
    "!=": 1,
    "#else": 2,
    "#if": 3,
    "&": 4,
    "(": 5,
    ")": 6,
    "*": 7,
    ",": 8,
    "-1": 9,
    "->": 10,
    "0": 11,
    "1": 12,
    "2": 13,
    ":": 14,
    ";": 15,
    "=": 16,
    "==": 17,
    ">": 18,
    "ERROR": 19,
    "End": 20,
    "FUN1": 21,
    "FUN2": 22,
    "FUN3": 23,
    "FUN4": 24,
    "FUN5": 25,
    "FUN6": 26,
    "TCGv": 27,
    "VAR1": 28,
    "VAR2": 29,
    "VAR3": 30,
    "VAR4": 31,
    "VAR5": 32,
    "VAR6": 33,
    "VAR7": 34,
    "VAR8": 35,
    "argument_list": 36,
    "assignment_expression": 37,
    "binary_expression": 38,
    "bool": 39,
    "break": 40,
    "break_statement": 41,
    "call_expression": 42,
    "case": 43,
    "case_statement": 44,
    "compound_statement": 45,
    "condition_clause": 46,
    "declaration": 47,
    "default": 48,
    "else": 49,
    "else_clause": 50,
    "expression_statement": 51,
    "false": 52,
    "field_expression": 53,
    "function_declarator": 54,
    "function_definition": 55,
    "if": 56,
    "if (FUN4(VAR2->VAR5)) {  FUN3(VAR2, VAR4);  return;  }  FUN5(VAR6, VAR7[FUN6(VAR2->VAR8)],  VAR7[FUN7(VAR2->VAR8)]);  #endif  }  ": 57,
    "if_statement": 58,
    "init_declarator": 59,
    "inline": 60,
    "int": 61,
    "int64_t": 62,
    "parameter_declaration": 63,
    "parameter_list": 64,
    "pointer_declarator": 65,
    "pointer_expression": 66,
    "return": 67,
    "return_statement": 68,
    "static": 69,
    "storage_class_specifier": 70,
    "switch": 71,
    "switch_statement": 72,
    "translation_unit": 73,
    "unary_expression": 74,
    "void": 75,
    "{": 76,
    "||": 77,
    "}": 78
}