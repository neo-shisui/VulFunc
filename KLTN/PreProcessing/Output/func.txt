[
    {
        "func_name": "CWE416_Use_After_Free__malloc_free_struct_15_bad",
        "func_code": "void CWE416_Use_After_Free__malloc_free_struct_15_bad()\n{\n    twoIntsStruct * data;\n    /* Initialize data */\n    data = NULL;\n    switch(6)\n    {\n    case 6:\n        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));\n        if (data == NULL) {exit(-1);}\n        {\n            size_t i;\n            for(i = 0; i < 100; i++)\n            {\n                data[i].intOne = 1;\n                data[i].intTwo = 2;\n            }\n        }\n        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */\n        free(data);\n        break;\n    default:\n        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    switch(7)\n    {\n    case 7:\n        /* POTENTIAL FLAW: Use of data that may have been freed */\n        printStructLine(&data[0]);\n        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */\n        break;\n    default:\n        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}"
    },
    {
        "func_name": "goodB2G1",
        "func_code": "static void goodB2G1()\n{\n    twoIntsStruct * data;\n    /* Initialize data */\n    data = NULL;\n    switch(6)\n    {\n    case 6:\n        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));\n        if (data == NULL) {exit(-1);}\n        {\n            size_t i;\n            for(i = 0; i < 100; i++)\n            {\n                data[i].intOne = 1;\n                data[i].intTwo = 2;\n            }\n        }\n        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */\n        free(data);\n        break;\n    default:\n        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    switch(8)\n    {\n    case 7:\n        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */\n        printLine(\"Benign, fixed string\");\n        break;\n    default:\n        /* FIX: Don't use data that may have been freed already */\n        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */\n        /* do nothing */\n        ; /* empty statement needed for some flow variants */\n        break;\n    }\n}"
    },
    {
        "func_name": "goodB2G2",
        "func_code": "static void goodB2G2()\n{\n    twoIntsStruct * data;\n    /* Initialize data */\n    data = NULL;\n    switch(6)\n    {\n    case 6:\n        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));\n        if (data == NULL) {exit(-1);}\n        {\n            size_t i;\n            for(i = 0; i < 100; i++)\n            {\n                data[i].intOne = 1;\n                data[i].intTwo = 2;\n            }\n        }\n        /* POTENTIAL FLAW: Free data in the source - the bad sink attempts to use data */\n        free(data);\n        break;\n    default:\n        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    switch(7)\n    {\n    case 7:\n        /* FIX: Don't use data that may have been freed already */\n        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */\n        /* do nothing */\n        ; /* empty statement needed for some flow variants */\n        break;\n    default:\n        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}"
    },
    {
        "func_name": "goodG2B1",
        "func_code": "static void goodG2B1()\n{\n    twoIntsStruct * data;\n    /* Initialize data */\n    data = NULL;\n    switch(5)\n    {\n    case 6:\n        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */\n        printLine(\"Benign, fixed string\");\n        break;\n    default:\n        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));\n        if (data == NULL) {exit(-1);}\n        {\n            size_t i;\n            for(i = 0; i < 100; i++)\n            {\n                data[i].intOne = 1;\n                data[i].intTwo = 2;\n            }\n        }\n        /* FIX: Do not free data in the source */\n        break;\n    }\n    switch(7)\n    {\n    case 7:\n        /* POTENTIAL FLAW: Use of data that may have been freed */\n        printStructLine(&data[0]);\n        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */\n        break;\n    default:\n        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}"
    },
    {
        "func_name": "goodG2B2",
        "func_code": "static void goodG2B2()\n{\n    twoIntsStruct * data;\n    /* Initialize data */\n    data = NULL;\n    switch(6)\n    {\n    case 6:\n        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));\n        if (data == NULL) {exit(-1);}\n        {\n            size_t i;\n            for(i = 0; i < 100; i++)\n            {\n                data[i].intOne = 1;\n                data[i].intTwo = 2;\n            }\n        }\n        /* FIX: Do not free data in the source */\n        break;\n    default:\n        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    switch(7)\n    {\n    case 7:\n        /* POTENTIAL FLAW: Use of data that may have been freed */\n        printStructLine(&data[0]);\n        /* POTENTIAL INCIDENTAL - Possible memory leak here if data was not freed */\n        break;\n    default:\n        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */\n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}"
    },
    {
        "func_name": "CWE416_Use_After_Free__malloc_free_struct_15_good",
        "func_code": "void CWE416_Use_After_Free__malloc_free_struct_15_good()\n{\n    goodB2G1();\n    goodB2G2();\n    goodG2B1();\n    goodG2B2();\n}"
    }
]