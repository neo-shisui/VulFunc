translation_unit 
 function_definition 
  primitive_type void
  pointer_declarator 
   * *
   function_declarator 
    identifier bad
    parameter_list 
     ( (
     parameter_declaration 
      primitive_type int
      identifier x
     ) )
  compound_statement 
   { {
   declaration 
    primitive_type char
    pointer_declarator 
     * *
     identifier data
    ; ;
   declaration 
    template_type 
     type_identifier vector
     template_argument_list 
      < <
      type_descriptor 
       primitive_type char
       abstract_pointer_declarator 
        * *
      > >
    identifier dataVector
    ; ;
   declaration 
    primitive_type char
    init_declarator 
     array_declarator 
      identifier dataBuffer
      [ [
      number_literal 100
      ] ]
     = =
     string_literal 
      " "
      " "
    ; ;
   expression_statement 
    assignment_expression 
     identifier data
     = =
     identifier dataBuffer
    ; ;
   compound_statement 
    { {
    declaration 
     type_identifier WSADATA
     identifier wsaData
     ; ;
    declaration 
     type_identifier BOOL
     init_declarator 
      identifier wsaDataInit
      = =
      false FALSE
     ; ;
    declaration 
     type_identifier SOCKET
     init_declarator 
      identifier listenSocket
      = =
      identifier INVALID_SOCKET
     ; ;
    declaration 
     type_identifier SOCKET
     init_declarator 
      identifier acceptSocket
      = =
      identifier INVALID_SOCKET
     ; ;
    declaration 
     struct_specifier 
      struct struct
      type_identifier sockaddr_in
     identifier service
     ; ;
    declaration 
     primitive_type int
     identifier recvResult
     ; ;
    do_statement 
     do do
     compound_statement 
      { {
      if_statement 
       if if
       condition_clause 
        ( (
        binary_expression 
         call_expression 
          identifier WSAStartup
          argument_list 
           ( (
           call_expression 
            identifier MAKEWORD
            argument_list 
             ( (
             number_literal 2
             , ,
             number_literal 2
             ) )
           , ,
           pointer_expression 
            & &
            identifier wsaData
           ) )
         != !=
         identifier NO_ERROR
        ) )
       compound_statement 
        { {
        break_statement 
         break break
         ; ;
        } }
      expression_statement 
       assignment_expression 
        identifier wsaDataInit
        = =
        number_literal 1
       ; ;
      expression_statement 
       assignment_expression 
        identifier listenSocket
        = =
        call_expression 
         identifier socket
         argument_list 
          ( (
          identifier PF_INET
          , ,
          identifier SOCK_STREAM
          , ,
          number_literal 0
          ) )
       ; ;
      if_statement 
       if if
       condition_clause 
        ( (
        binary_expression 
         identifier listenSocket
         == ==
         identifier INVALID_SOCKET
        ) )
       compound_statement 
        { {
        break_statement 
         break break
         ; ;
        } }
      expression_statement 
       call_expression 
        identifier memset
        argument_list 
         ( (
         pointer_expression 
          & &
          identifier service
         , ,
         number_literal 0
         , ,
         sizeof_expression 
          sizeof sizeof
          parenthesized_expression 
           ( (
           identifier service
           ) )
         ) )
       ; ;
      expression_statement 
       assignment_expression 
        field_expression 
         identifier service
         . .
         field_identifier sin_family
        = =
        identifier AF_INET
       ; ;
      expression_statement 
       assignment_expression 
        field_expression 
         field_expression 
          identifier service
          . .
          field_identifier sin_addr
         . .
         field_identifier s_addr
        = =
        identifier INADDR_ANY
       ; ;
      expression_statement 
       assignment_expression 
        field_expression 
         identifier service
         . .
         field_identifier sin_port
        = =
        call_expression 
         identifier htons
         argument_list 
          ( (
          identifier LISTEN_PORT
          ) )
       ; ;
      if_statement 
       if if
       condition_clause 
        ( (
        binary_expression 
         identifier SOCKET_ERROR
         == ==
         call_expression 
          identifier bind
          argument_list 
           ( (
           identifier listenSocket
           , ,
           cast_expression 
            ( (
            type_descriptor 
             struct_specifier 
              struct struct
              type_identifier sockaddr
             abstract_pointer_declarator 
              * *
            ) )
            pointer_expression 
             & &
             identifier service
           , ,
           sizeof_expression 
            sizeof sizeof
            parenthesized_expression 
             ( (
             identifier service
             ) )
           ) )
        ) )
       compound_statement 
        { {
        break_statement 
         break break
         ; ;
        } }
      if_statement 
       if if
       condition_clause 
        ( (
        binary_expression 
         identifier SOCKET_ERROR
         == ==
         call_expression 
          identifier listen
          argument_list 
           ( (
           identifier listenSocket
           , ,
           identifier LISTEN_BACKLOG
           ) )
        ) )
       compound_statement 
        { {
        break_statement 
         break break
         ; ;
        } }
      expression_statement 
       assignment_expression 
        identifier acceptSocket
        = =
        call_expression 
         identifier accept
         argument_list 
          ( (
          identifier listenSocket
          , ,
          null 
           NULL NULL
          , ,
          null 
           NULL NULL
          ) )
       ; ;
      if_statement 
       if if
       condition_clause 
        ( (
        binary_expression 
         identifier acceptSocket
         == ==
         identifier INVALID_SOCKET
        ) )
       compound_statement 
        { {
        break_statement 
         break break
         ; ;
        } }
      comment /* INCIDENTAL CWE 188 - reliance on data memory layout
             * recv and friends return "number of bytes" received
             * char's on our system, however, may not be "octets" (8-bit
             * bytes) but could be just about anything.  Also,
             * even if the external environment is ASCII or UTF8,
             * the ANSI/ISO C standard does not dictate that the
             * character set used by the actual language or character
             * constants matches.
             *
             * In practice none of these are usually issues...
             */
      comment /* FLAW: read the new hostname from a network socket */
      expression_statement 
       assignment_expression 
        identifier recvResult
        = =
        call_expression 
         identifier recv
         argument_list 
          ( (
          identifier acceptSocket
          , ,
          identifier data
          , ,
          binary_expression 
           number_literal 100
           - -
           number_literal 1
          , ,
          number_literal 0
          ) )
       ; ;
      if_statement 
       if if
       condition_clause 
        ( (
        binary_expression 
         binary_expression 
          identifier recvResult
          == ==
          identifier SOCKET_ERROR
         || ||
         binary_expression 
          identifier recvResult
          == ==
          number_literal 0
        ) )
       compound_statement 
        { {
        break_statement 
         break break
         ; ;
        } }
      expression_statement 
       subscript_expression 
        identifier data
        subscript_argument_list 
         [ [
         identifier recvResult
         ] ]
       ERROR 
        = =
        ' '
        ERROR  
        ' '
       ; ;
      } }
     while while
     parenthesized_expression 
      ( (
      number_literal 0
      ) )
     ; ;
    if_statement 
     if if
     condition_clause 
      ( (
      binary_expression 
       identifier acceptSocket
       != !=
       identifier INVALID_SOCKET
      ) )
     compound_statement 
      { {
      expression_statement 
       call_expression 
        identifier closesocket
        argument_list 
         ( (
         identifier acceptSocket
         ) )
       ; ;
      } }
    if_statement 
     if if
     condition_clause 
      ( (
      binary_expression 
       identifier listenSocket
       != !=
       identifier INVALID_SOCKET
      ) )
     compound_statement 
      { {
      expression_statement 
       call_expression 
        identifier closesocket
        argument_list 
         ( (
         identifier listenSocket
         ) )
       ; ;
      } }
    if_statement 
     if if
     condition_clause 
      ( (
      identifier wsaDataInit
      ) )
     compound_statement 
      { {
      expression_statement 
       call_expression 
        identifier WSACleanup
        argument_list 
         ( (
         ) )
       ; ;
      } }
    } }
   } 
translation_unit 
 function_definition 
  primitive_type void
  pointer_declarator 
   * *
   function_declarator 
    identifier bad
    parameter_list 
     ( (
     parameter_declaration 
      primitive_type int
      identifier x
     ) )
  compound_statement 
   { {
   declaration 
    primitive_type char
    pointer_declarator 
     * *
     identifier data
    ; ;
   declaration 
    template_type 
     type_identifier vector
     template_argument_list 
      < <
      type_descriptor 
       primitive_type char
       abstract_pointer_declarator 
        * *
      > >
    identifier dataVector
    ; ;
   declaration 
    primitive_type char
    init_declarator 
     array_declarator 
      identifier dataBuffer
      [ [
      number_literal 100
      ] ]
     = =
     string_literal 
      " "
      " "
    ; ;
   expression_statement 
    assignment_expression 
     identifier data
     = =
     identifier dataBuffer
    ; ;
   compound_statement 
    { {
    declaration 
     type_identifier WSADATA
     identifier wsaData
     ; ;
    declaration 
     type_identifier BOOL
     init_declarator 
      identifier wsaDataInit
      = =
      false FALSE
     ; ;
    declaration 
     type_identifier SOCKET
     init_declarator 
      identifier listenSocket
      = =
      identifier INVALID_SOCKET
     ; ;
    declaration 
     type_identifier SOCKET
     init_declarator 
      identifier acceptSocket
      = =
      identifier INVALID_SOCKET
     ; ;
    declaration 
     struct_specifier 
      struct struct
      type_identifier sockaddr_in
     identifier service
     ; ;
    declaration 
     primitive_type int
     identifier recvResult
     ; ;
    do_statement 
     do do
     compound_statement 
      { {
      if_statement 
       if if
       condition_clause 
        ( (
        binary_expression 
         call_expression 
          identifier WSAStartup
          argument_list 
           ( (
           call_expression 
            identifier MAKEWORD
            argument_list 
             ( (
             number_literal 2
             , ,
             number_literal 2
             ) )
           , ,
           pointer_expression 
            & &
            identifier wsaData
           ) )
         != !=
         identifier NO_ERROR
        ) )
       compound_statement 
        { {
        break_statement 
         break break
         ; ;
        } }
      expression_statement 
       assignment_expression 
        identifier wsaDataInit
        = =
        number_literal 1
       ; ;
      expression_statement 
       assignment_expression 
        identifier listenSocket
        = =
        call_expression 
         identifier socket
         argument_list 
          ( (
          identifier PF_INET
          , ,
          identifier SOCK_STREAM
          , ,
          number_literal 0
          ) )
       ; ;
      if_statement 
       if if
       condition_clause 
        ( (
        binary_expression 
         identifier listenSocket
         == ==
         identifier INVALID_SOCKET
        ) )
       compound_statement 
        { {
        break_statement 
         break break
         ; ;
        } }
      expression_statement 
       call_expression 
        identifier memset
        argument_list 
         ( (
         pointer_expression 
          & &
          identifier service
         , ,
         number_literal 0
         , ,
         sizeof_expression 
          sizeof sizeof
          parenthesized_expression 
           ( (
           identifier service
           ) )
         ) )
       ; ;
      expression_statement 
       assignment_expression 
        field_expression 
         identifier service
         . .
         field_identifier sin_family
        = =
        identifier AF_INET
       ; ;
      expression_statement 
       assignment_expression 
        field_expression 
         field_expression 
          identifier service
          . .
          field_identifier sin_addr
         . .
         field_identifier s_addr
        = =
        identifier INADDR_ANY
       ; ;
      expression_statement 
       assignment_expression 
        field_expression 
         identifier service
         . .
         field_identifier sin_port
        = =
        call_expression 
         identifier htons
         argument_list 
          ( (
          identifier LISTEN_PORT
          ) )
       ; ;
      if_statement 
       if if
       condition_clause 
        ( (
        binary_expression 
         identifier SOCKET_ERROR
         == ==
         call_expression 
          identifier bind
          argument_list 
           ( (
           identifier listenSocket
           , ,
           cast_expression 
            ( (
            type_descriptor 
             struct_specifier 
              struct struct
              type_identifier sockaddr
             abstract_pointer_declarator 
              * *
            ) )
            pointer_expression 
             & &
             identifier service
           , ,
           sizeof_expression 
            sizeof sizeof
            parenthesized_expression 
             ( (
             identifier service
             ) )
           ) )
        ) )
       compound_statement 
        { {
        break_statement 
         break break
         ; ;
        } }
      if_statement 
       if if
       condition_clause 
        ( (
        binary_expression 
         identifier SOCKET_ERROR
         == ==
         call_expression 
          identifier listen
          argument_list 
           ( (
           identifier listenSocket
           , ,
           identifier LISTEN_BACKLOG
           ) )
        ) )
       compound_statement 
        { {
        break_statement 
         break break
         ; ;
        } }
      expression_statement 
       assignment_expression 
        identifier acceptSocket
        = =
        call_expression 
         identifier accept
         argument_list 
          ( (
          identifier listenSocket
          , ,
          null 
           NULL NULL
          , ,
          null 
           NULL NULL
          ) )
       ; ;
      if_statement 
       if if
       condition_clause 
        ( (
        binary_expression 
         identifier acceptSocket
         == ==
         identifier INVALID_SOCKET
        ) )
       compound_statement 
        { {
        break_statement 
         break break
         ; ;
        } }
      comment /* INCIDENTAL CWE 188 - reliance on data memory layout
             * recv and friends return "number of bytes" received
             * char's on our system, however, may not be "octets" (8-bit
             * bytes) but could be just about anything.  Also,
             * even if the external environment is ASCII or UTF8,
             * the ANSI/ISO C standard does not dictate that the
             * character set used by the actual language or character
             * constants matches.
             *
             * In practice none of these are usually issues...
             */
      comment /* FLAW: read the new hostname from a network socket */
      expression_statement 
       assignment_expression 
        identifier recvResult
        = =
        call_expression 
         identifier recv
         argument_list 
          ( (
          identifier acceptSocket
          , ,
          identifier data
          , ,
          binary_expression 
           number_literal 100
           - -
           number_literal 1
          , ,
          number_literal 0
          ) )
       ; ;
      if_statement 
       if if
       condition_clause 
        ( (
        binary_expression 
         binary_expression 
          identifier recvResult
          == ==
          identifier SOCKET_ERROR
         || ||
         binary_expression 
          identifier recvResult
          == ==
          number_literal 0
        ) )
       compound_statement 
        { {
        break_statement 
         break break
         ; ;
        } }
      expression_statement 
       subscript_expression 
        identifier data
        subscript_argument_list 
         [ [
         identifier recvResult
         ] ]
       ERROR 
        = =
        ' '
        ERROR  
        ' '
       ; ;
      } }
     while while
     parenthesized_expression 
      ( (
      number_literal 0
      ) )
     ; ;
    if_statement 
     if if
     condition_clause 
      ( (
      binary_expression 
       identifier acceptSocket
       != !=
       identifier INVALID_SOCKET
      ) )
     compound_statement 
      { {
      expression_statement 
       call_expression 
        identifier closesocket
        argument_list 
         ( (
         identifier acceptSocket
         ) )
       ; ;
      } }
    if_statement 
     if if
     condition_clause 
      ( (
      binary_expression 
       identifier listenSocket
       != !=
       identifier INVALID_SOCKET
      ) )
     compound_statement 
      { {
      expression_statement 
       call_expression 
        identifier closesocket
        argument_list 
         ( (
         identifier listenSocket
         ) )
       ; ;
      } }
    if_statement 
     if if
     condition_clause 
      ( (
      identifier wsaDataInit
      ) )
     compound_statement 
      { {
      expression_statement 
       call_expression 
        identifier WSACleanup
        argument_list 
         ( (
         ) )
       ; ;
      } }
    } }
   } 
translation_unit 
 function_definition 
  primitive_type void
  pointer_declarator 
   * *
   function_declarator 
    identifier bad
    parameter_list 
     ( (
     parameter_declaration 
      primitive_type int
      identifier x
     ) )
  compound_statement 
   { {
   declaration 
    primitive_type char
    pointer_declarator 
     * *
     identifier data
    ; ;
   declaration 
    template_type 
     type_identifier vector
     template_argument_list 
      < <
      type_descriptor 
       primitive_type char
       abstract_pointer_declarator 
        * *
      > >
    identifier dataVector
    ; ;
   declaration 
    primitive_type char
    init_declarator 
     array_declarator 
      identifier dataBuffer
      [ [
      number_literal 100
      ] ]
     = =
     string_literal 
      " "
      " "
    ; ;
   expression_statement 
    assignment_expression 
     identifier data
     = =
     identifier dataBuffer
    ; ;
   compound_statement 
    { {
    declaration 
     type_identifier WSADATA
     identifier wsaData
     ; ;
    declaration 
     type_identifier BOOL
     init_declarator 
      identifier wsaDataInit
      = =
      false FALSE
     ; ;
    declaration 
     type_identifier SOCKET
     init_declarator 
      identifier listenSocket
      = =
      identifier INVALID_SOCKET
     ; ;
    declaration 
     type_identifier SOCKET
     init_declarator 
      identifier acceptSocket
      = =
      identifier INVALID_SOCKET
     ; ;
    declaration 
     struct_specifier 
      struct struct
      type_identifier sockaddr_in
     identifier service
     ; ;
    declaration 
     primitive_type int
     identifier recvResult
     ; ;
    do_statement 
     do do
     compound_statement 
      { {
      if_statement 
       if if
       condition_clause 
        ( (
        binary_expression 
         call_expression 
          identifier WSAStartup
          argument_list 
           ( (
           call_expression 
            identifier MAKEWORD
            argument_list 
             ( (
             number_literal 2
             , ,
             number_literal 2
             ) )
           , ,
           pointer_expression 
            & &
            identifier wsaData
           ) )
         != !=
         identifier NO_ERROR
        ) )
       compound_statement 
        { {
        break_statement 
         break break
         ; ;
        } }
      expression_statement 
       assignment_expression 
        identifier wsaDataInit
        = =
        number_literal 1
       ; ;
      expression_statement 
       assignment_expression 
        identifier listenSocket
        = =
        call_expression 
         identifier socket
         argument_list 
          ( (
          identifier PF_INET
          , ,
          identifier SOCK_STREAM
          , ,
          number_literal 0
          ) )
       ; ;
      if_statement 
       if if
       condition_clause 
        ( (
        binary_expression 
         identifier listenSocket
         == ==
         identifier INVALID_SOCKET
        ) )
       compound_statement 
        { {
        break_statement 
         break break
         ; ;
        } }
      expression_statement 
       call_expression 
        identifier memset
        argument_list 
         ( (
         pointer_expression 
          & &
          identifier service
         , ,
         number_literal 0
         , ,
         sizeof_expression 
          sizeof sizeof
          parenthesized_expression 
           ( (
           identifier service
           ) )
         ) )
       ; ;
      expression_statement 
       assignment_expression 
        field_expression 
         identifier service
         . .
         field_identifier sin_family
        = =
        identifier AF_INET
       ; ;
      expression_statement 
       assignment_expression 
        field_expression 
         field_expression 
          identifier service
          . .
          field_identifier sin_addr
         . .
         field_identifier s_addr
        = =
        identifier INADDR_ANY
       ; ;
      expression_statement 
       assignment_expression 
        field_expression 
         identifier service
         . .
         field_identifier sin_port
        = =
        call_expression 
         identifier htons
         argument_list 
          ( (
          identifier LISTEN_PORT
          ) )
       ; ;
      if_statement 
       if if
       condition_clause 
        ( (
        binary_expression 
         identifier SOCKET_ERROR
         == ==
         call_expression 
          identifier bind
          argument_list 
           ( (
           identifier listenSocket
           , ,
           cast_expression 
            ( (
            type_descriptor 
             struct_specifier 
              struct struct
              type_identifier sockaddr
             abstract_pointer_declarator 
              * *
            ) )
            pointer_expression 
             & &
             identifier service
           , ,
           sizeof_expression 
            sizeof sizeof
            parenthesized_expression 
             ( (
             identifier service
             ) )
           ) )
        ) )
       compound_statement 
        { {
        break_statement 
         break break
         ; ;
        } }
      if_statement 
       if if
       condition_clause 
        ( (
        binary_expression 
         identifier SOCKET_ERROR
         == ==
         call_expression 
          identifier listen
          argument_list 
           ( (
           identifier listenSocket
           , ,
           identifier LISTEN_BACKLOG
           ) )
        ) )
       compound_statement 
        { {
        break_statement 
         break break
         ; ;
        } }
      expression_statement 
       assignment_expression 
        identifier acceptSocket
        = =
        call_expression 
         identifier accept
         argument_list 
          ( (
          identifier listenSocket
          , ,
          null 
           NULL NULL
          , ,
          null 
           NULL NULL
          ) )
       ; ;
      if_statement 
       if if
       condition_clause 
        ( (
        binary_expression 
         identifier acceptSocket
         == ==
         identifier INVALID_SOCKET
        ) )
       compound_statement 
        { {
        break_statement 
         break break
         ; ;
        } }
      comment /* INCIDENTAL CWE 188 - reliance on data memory layout
             * recv and friends return "number of bytes" received
             * char's on our system, however, may not be "octets" (8-bit
             * bytes) but could be just about anything.  Also,
             * even if the external environment is ASCII or UTF8,
             * the ANSI/ISO C standard does not dictate that the
             * character set used by the actual language or character
             * constants matches.
             *
             * In practice none of these are usually issues...
             */
      comment /* FLAW: read the new hostname from a network socket */
      expression_statement 
       assignment_expression 
        identifier recvResult
        = =
        call_expression 
         identifier recv
         argument_list 
          ( (
          identifier acceptSocket
          , ,
          identifier data
          , ,
          binary_expression 
           number_literal 100
           - -
           number_literal 1
          , ,
          number_literal 0
          ) )
       ; ;
      if_statement 
       if if
       condition_clause 
        ( (
        binary_expression 
         binary_expression 
          identifier recvResult
          == ==
          identifier SOCKET_ERROR
         || ||
         binary_expression 
          identifier recvResult
          == ==
          number_literal 0
        ) )
       compound_statement 
        { {
        break_statement 
         break break
         ; ;
        } }
      expression_statement 
       subscript_expression 
        identifier data
        subscript_argument_list 
         [ [
         identifier recvResult
         ] ]
       ERROR 
        = =
        ' '
        ERROR  
        ' '
       ; ;
      } }
     while while
     parenthesized_expression 
      ( (
      number_literal 0
      ) )
     ; ;
    if_statement 
     if if
     condition_clause 
      ( (
      binary_expression 
       identifier acceptSocket
       != !=
       identifier INVALID_SOCKET
      ) )
     compound_statement 
      { {
      expression_statement 
       call_expression 
        identifier closesocket
        argument_list 
         ( (
         identifier acceptSocket
         ) )
       ; ;
      } }
    if_statement 
     if if
     condition_clause 
      ( (
      binary_expression 
       identifier listenSocket
       != !=
       identifier INVALID_SOCKET
      ) )
     compound_statement 
      { {
      expression_statement 
       call_expression 
        identifier closesocket
        argument_list 
         ( (
         identifier listenSocket
         ) )
       ; ;
      } }
    if_statement 
     if if
     condition_clause 
      ( (
      identifier wsaDataInit
      ) )
     compound_statement 
      { {
      expression_statement 
       call_expression 
        identifier WSACleanup
        argument_list 
         ( (
         ) )
       ; ;
      } }
    } }
   } 
translation_unit 
 function_definition 
  primitive_type void
  function_declarator 
   identifier bad
   parameter_list 
    ( (
    parameter_declaration 
     primitive_type int
     identifier x
    ) )
  compound_statement 
   { {
   declaration 
    primitive_type int
    init_declarator 
     identifier a
     = =
     number_literal 10
    ; ;
   } }
translation_unit 
 function_definition 
  primitive_type void
  function_declarator 
   identifier bad
   parameter_list 
    ( (
    parameter_declaration 
     primitive_type int
     identifier x
    ) )
  compound_statement 
   { {
   declaration 
    primitive_type int
    init_declarator 
     identifier a
     = =
     number_literal 10
    ; ;
   } }
translation_unit 
 function_definition 
  primitive_type void
  function_declarator 
   identifier bad
   parameter_list 
    ( (
    parameter_declaration 
     primitive_type int
     identifier x
    ) )
  compound_statement 
   { {
   declaration 
    primitive_type int
    init_declarator 
     identifier a
     = =
     number_literal 0x10
    ; ;
   } }
translation_unit 
 function_definition 
  primitive_type void
  function_declarator 
   identifier bad
   parameter_list 
    ( (
    parameter_declaration 
     primitive_type int
     identifier x
    ) )
  compound_statement 
   { {
   declaration 
    primitive_type int
    init_declarator 
     identifier a
     = =
     number_literal 10.1
    ; ;
   } }
