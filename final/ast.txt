Function: CWE15_External_Control_of_System_or_Configuration_Setting__w32_03_bad
translation_unit
 function_definition
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      ==
      number_literal
     )
    compound_statement
     {
     compound_statement
      {
      declaration
       type_identifier
       identifier
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        false
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        identifier
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        identifier
       ;
      declaration
       struct_specifier
        struct
        type_identifier
       identifier
       ;
      declaration
       primitive_type
       identifier
       ;
      do_statement
       do
       compound_statement
        {
        if_statement
         if
         condition_clause
          (
          binary_expression
           call_expression
            identifier
            argument_list
             (
             call_expression
              identifier
              argument_list
               (
               number_literal
               ,
               number_literal
               )
             ,
             pointer_expression
              &
              identifier
             )
           !=
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          number_literal
         ;
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            identifier
            ,
            number_literal
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         call_expression
          identifier
          argument_list
           (
           pointer_expression
            &
            identifier
           ,
           number_literal
           ,
           sizeof_expression
            sizeof
            parenthesized_expression
             (
             identifier
             )
           )
         ;
        expression_statement
         assignment_expression
          field_expression
           identifier
           .
           field_identifier
          =
          identifier
         ;
        expression_statement
         assignment_expression
          field_expression
           field_expression
            identifier
            .
            field_identifier
           .
           field_identifier
          =
          identifier
         ;
        expression_statement
         assignment_expression
          field_expression
           identifier
           .
           field_identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           call_expression
            identifier
            argument_list
             (
             identifier
             ,
             cast_expression
              (
              type_descriptor
               struct_specifier
                struct
                type_identifier
               abstract_pointer_declarator
                *
              )
              pointer_expression
               &
               identifier
             ,
             sizeof_expression
              sizeof
              parenthesized_expression
               (
               identifier
               )
             )
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           call_expression
            identifier
            argument_list
             (
             identifier
             ,
             identifier
             )
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            null
             NULL
            ,
            null
             NULL
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            identifier
            ,
            binary_expression
             number_literal
             -
             number_literal
            ,
            number_literal
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           binary_expression
            identifier
            ==
            identifier
           ||
           binary_expression
            identifier
            ==
            number_literal
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         subscript_expression
          identifier
          subscript_argument_list
           [
           identifier
           ]
         ERROR
          =
          '
          '
         ;
        }
       while
       parenthesized_expression
        (
        number_literal
        )
       ;
      if_statement
       if
       condition_clause
        (
        binary_expression
         identifier
         !=
         identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           identifier
           )
         ;
        }
      if_statement
       if
       condition_clause
        (
        binary_expression
         identifier
         !=
         identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           identifier
           )
         ;
        }
      if_statement
       if
       condition_clause
        (
        identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           )
         ;
        }
      }
     }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: goodG2B1
translation_unit
 function_definition
  storage_class_specifier
   static
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      !=
      number_literal
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     }
    else_clause
     else
     compound_statement
      {
      expression_statement
       call_expression
        identifier
        argument_list
         (
         identifier
         ,
         string_literal
          "
          "
         )
       ;
      }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: goodG2B2
translation_unit
 function_definition
  storage_class_specifier
   static
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      ==
      number_literal
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        identifier
        ,
        string_literal
         "
         "
        )
      ;
     }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: CWE15_External_Control_of_System_or_Configuration_Setting__w32_03_good
translation_unit
 function_definition
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   expression_statement
    call_expression
     identifier
     argument_list
      (
      )
    ;
   expression_statement
    call_expression
     identifier
     argument_list
      (
      )
    ;
   }

----------------------------------------
Function: CWE15_External_Control_of_System_or_Configuration_Setting__w32_03_bad
translation_unit
 function_definition
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      ==
      number_literal
     )
    compound_statement
     {
     compound_statement
      {
      declaration
       type_identifier
       identifier
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        false
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        identifier
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        identifier
       ;
      declaration
       struct_specifier
        struct
        type_identifier
       identifier
       ;
      declaration
       primitive_type
       identifier
       ;
      do_statement
       do
       compound_statement
        {
        if_statement
         if
         condition_clause
          (
          binary_expression
           call_expression
            identifier
            argument_list
             (
             call_expression
              identifier
              argument_list
               (
               number_literal
               ,
               number_literal
               )
             ,
             pointer_expression
              &
              identifier
             )
           !=
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          number_literal
         ;
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            identifier
            ,
            number_literal
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         call_expression
          identifier
          argument_list
           (
           pointer_expression
            &
            identifier
           ,
           number_literal
           ,
           sizeof_expression
            sizeof
            parenthesized_expression
             (
             identifier
             )
           )
         ;
        expression_statement
         assignment_expression
          field_expression
           identifier
           .
           field_identifier
          =
          identifier
         ;
        expression_statement
         assignment_expression
          field_expression
           field_expression
            identifier
            .
            field_identifier
           .
           field_identifier
          =
          identifier
         ;
        expression_statement
         assignment_expression
          field_expression
           identifier
           .
           field_identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           call_expression
            identifier
            argument_list
             (
             identifier
             ,
             cast_expression
              (
              type_descriptor
               struct_specifier
                struct
                type_identifier
               abstract_pointer_declarator
                *
              )
              pointer_expression
               &
               identifier
             ,
             sizeof_expression
              sizeof
              parenthesized_expression
               (
               identifier
               )
             )
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           call_expression
            identifier
            argument_list
             (
             identifier
             ,
             identifier
             )
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            null
             NULL
            ,
            null
             NULL
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            identifier
            ,
            binary_expression
             number_literal
             -
             number_literal
            ,
            number_literal
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           binary_expression
            identifier
            ==
            identifier
           ||
           binary_expression
            identifier
            ==
            number_literal
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         subscript_expression
          identifier
          subscript_argument_list
           [
           identifier
           ]
         ERROR
          =
          '
          '
         ;
        }
       while
       parenthesized_expression
        (
        number_literal
        )
       ;
      if_statement
       if
       condition_clause
        (
        binary_expression
         identifier
         !=
         identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           identifier
           )
         ;
        }
      if_statement
       if
       condition_clause
        (
        binary_expression
         identifier
         !=
         identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           identifier
           )
         ;
        }
      if_statement
       if
       condition_clause
        (
        identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           )
         ;
        }
      }
     }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: goodG2B1
translation_unit
 function_definition
  storage_class_specifier
   static
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      !=
      number_literal
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     }
    else_clause
     else
     compound_statement
      {
      expression_statement
       call_expression
        identifier
        argument_list
         (
         identifier
         ,
         string_literal
          "
          "
         )
       ;
      }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: goodG2B2
translation_unit
 function_definition
  storage_class_specifier
   static
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      ==
      number_literal
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        identifier
        ,
        string_literal
         "
         "
        )
      ;
     }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: CWE15_External_Control_of_System_or_Configuration_Setting__w32_03_good
translation_unit
 function_definition
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   expression_statement
    call_expression
     identifier
     argument_list
      (
      )
    ;
   expression_statement
    call_expression
     identifier
     argument_list
      (
      )
    ;
   }

----------------------------------------
Function: CWE15_External_Control_of_System_or_Configuration_Setting__w32_03_bad
translation_unit
 function_definition
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      ==
      number_literal
     )
    compound_statement
     {
     compound_statement
      {
      declaration
       type_identifier
       identifier
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        false
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        identifier
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        identifier
       ;
      declaration
       struct_specifier
        struct
        type_identifier
       identifier
       ;
      declaration
       primitive_type
       identifier
       ;
      do_statement
       do
       compound_statement
        {
        if_statement
         if
         condition_clause
          (
          binary_expression
           call_expression
            identifier
            argument_list
             (
             call_expression
              identifier
              argument_list
               (
               number_literal
               ,
               number_literal
               )
             ,
             pointer_expression
              &
              identifier
             )
           !=
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          number_literal
         ;
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            identifier
            ,
            number_literal
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         call_expression
          identifier
          argument_list
           (
           pointer_expression
            &
            identifier
           ,
           number_literal
           ,
           sizeof_expression
            sizeof
            parenthesized_expression
             (
             identifier
             )
           )
         ;
        expression_statement
         assignment_expression
          field_expression
           identifier
           .
           field_identifier
          =
          identifier
         ;
        expression_statement
         assignment_expression
          field_expression
           field_expression
            identifier
            .
            field_identifier
           .
           field_identifier
          =
          identifier
         ;
        expression_statement
         assignment_expression
          field_expression
           identifier
           .
           field_identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           call_expression
            identifier
            argument_list
             (
             identifier
             ,
             cast_expression
              (
              type_descriptor
               struct_specifier
                struct
                type_identifier
               abstract_pointer_declarator
                *
              )
              pointer_expression
               &
               identifier
             ,
             sizeof_expression
              sizeof
              parenthesized_expression
               (
               identifier
               )
             )
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           call_expression
            identifier
            argument_list
             (
             identifier
             ,
             identifier
             )
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            null
             NULL
            ,
            null
             NULL
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            identifier
            ,
            binary_expression
             number_literal
             -
             number_literal
            ,
            number_literal
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           binary_expression
            identifier
            ==
            identifier
           ||
           binary_expression
            identifier
            ==
            number_literal
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         subscript_expression
          identifier
          subscript_argument_list
           [
           identifier
           ]
         ERROR
          =
          '
          '
         ;
        }
       while
       parenthesized_expression
        (
        number_literal
        )
       ;
      if_statement
       if
       condition_clause
        (
        binary_expression
         identifier
         !=
         identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           identifier
           )
         ;
        }
      if_statement
       if
       condition_clause
        (
        binary_expression
         identifier
         !=
         identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           identifier
           )
         ;
        }
      if_statement
       if
       condition_clause
        (
        identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           )
         ;
        }
      }
     }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: goodG2B1
translation_unit
 function_definition
  storage_class_specifier
   static
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      !=
      number_literal
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     }
    else_clause
     else
     compound_statement
      {
      expression_statement
       call_expression
        identifier
        argument_list
         (
         identifier
         ,
         string_literal
          "
          "
         )
       ;
      }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: goodG2B2
translation_unit
 function_definition
  storage_class_specifier
   static
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      ==
      number_literal
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        identifier
        ,
        string_literal
         "
         "
        )
      ;
     }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: CWE15_External_Control_of_System_or_Configuration_Setting__w32_03_good
translation_unit
 function_definition
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   expression_statement
    call_expression
     identifier
     argument_list
      (
      )
    ;
   expression_statement
    call_expression
     identifier
     argument_list
      (
      )
    ;
   }

----------------------------------------
Function: CWE15_External_Control_of_System_or_Configuration_Setting__w32_03_bad
translation_unit
 function_definition
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      ==
      number_literal
     )
    compound_statement
     {
     compound_statement
      {
      declaration
       type_identifier
       identifier
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        false
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        identifier
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        identifier
       ;
      declaration
       struct_specifier
        struct
        type_identifier
       identifier
       ;
      declaration
       primitive_type
       identifier
       ;
      do_statement
       do
       compound_statement
        {
        if_statement
         if
         condition_clause
          (
          binary_expression
           call_expression
            identifier
            argument_list
             (
             call_expression
              identifier
              argument_list
               (
               number_literal
               ,
               number_literal
               )
             ,
             pointer_expression
              &
              identifier
             )
           !=
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          number_literal
         ;
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            identifier
            ,
            number_literal
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         call_expression
          identifier
          argument_list
           (
           pointer_expression
            &
            identifier
           ,
           number_literal
           ,
           sizeof_expression
            sizeof
            parenthesized_expression
             (
             identifier
             )
           )
         ;
        expression_statement
         assignment_expression
          field_expression
           identifier
           .
           field_identifier
          =
          identifier
         ;
        expression_statement
         assignment_expression
          field_expression
           field_expression
            identifier
            .
            field_identifier
           .
           field_identifier
          =
          identifier
         ;
        expression_statement
         assignment_expression
          field_expression
           identifier
           .
           field_identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           call_expression
            identifier
            argument_list
             (
             identifier
             ,
             cast_expression
              (
              type_descriptor
               struct_specifier
                struct
                type_identifier
               abstract_pointer_declarator
                *
              )
              pointer_expression
               &
               identifier
             ,
             sizeof_expression
              sizeof
              parenthesized_expression
               (
               identifier
               )
             )
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           call_expression
            identifier
            argument_list
             (
             identifier
             ,
             identifier
             )
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            null
             NULL
            ,
            null
             NULL
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            identifier
            ,
            binary_expression
             number_literal
             -
             number_literal
            ,
            number_literal
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           binary_expression
            identifier
            ==
            identifier
           ||
           binary_expression
            identifier
            ==
            number_literal
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         subscript_expression
          identifier
          subscript_argument_list
           [
           identifier
           ]
         ERROR
          =
          '
          '
         ;
        }
       while
       parenthesized_expression
        (
        number_literal
        )
       ;
      if_statement
       if
       condition_clause
        (
        binary_expression
         identifier
         !=
         identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           identifier
           )
         ;
        }
      if_statement
       if
       condition_clause
        (
        binary_expression
         identifier
         !=
         identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           identifier
           )
         ;
        }
      if_statement
       if
       condition_clause
        (
        identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           )
         ;
        }
      }
     }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: goodG2B1
translation_unit
 function_definition
  storage_class_specifier
   static
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      !=
      number_literal
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     }
    else_clause
     else
     compound_statement
      {
      expression_statement
       call_expression
        identifier
        argument_list
         (
         identifier
         ,
         string_literal
          "
          "
         )
       ;
      }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: goodG2B2
translation_unit
 function_definition
  storage_class_specifier
   static
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      ==
      number_literal
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        identifier
        ,
        string_literal
         "
         "
        )
      ;
     }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: CWE15_External_Control_of_System_or_Configuration_Setting__w32_03_good
translation_unit
 function_definition
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   expression_statement
    call_expression
     identifier
     argument_list
      (
      )
    ;
   expression_statement
    call_expression
     identifier
     argument_list
      (
      )
    ;
   }

----------------------------------------
Function: CWE15_External_Control_of_System_or_Configuration_Setting__w32_03_bad
translation_unit
 function_definition
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      ==
      number_literal
     )
    compound_statement
     {
     compound_statement
      {
      declaration
       type_identifier
       identifier
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        false
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        identifier
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        identifier
       ;
      declaration
       struct_specifier
        struct
        type_identifier
       identifier
       ;
      declaration
       primitive_type
       identifier
       ;
      do_statement
       do
       compound_statement
        {
        if_statement
         if
         condition_clause
          (
          binary_expression
           call_expression
            identifier
            argument_list
             (
             call_expression
              identifier
              argument_list
               (
               number_literal
               ,
               number_literal
               )
             ,
             pointer_expression
              &
              identifier
             )
           !=
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          number_literal
         ;
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            identifier
            ,
            number_literal
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         call_expression
          identifier
          argument_list
           (
           pointer_expression
            &
            identifier
           ,
           number_literal
           ,
           sizeof_expression
            sizeof
            parenthesized_expression
             (
             identifier
             )
           )
         ;
        expression_statement
         assignment_expression
          field_expression
           identifier
           .
           field_identifier
          =
          identifier
         ;
        expression_statement
         assignment_expression
          field_expression
           field_expression
            identifier
            .
            field_identifier
           .
           field_identifier
          =
          identifier
         ;
        expression_statement
         assignment_expression
          field_expression
           identifier
           .
           field_identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           call_expression
            identifier
            argument_list
             (
             identifier
             ,
             cast_expression
              (
              type_descriptor
               struct_specifier
                struct
                type_identifier
               abstract_pointer_declarator
                *
              )
              pointer_expression
               &
               identifier
             ,
             sizeof_expression
              sizeof
              parenthesized_expression
               (
               identifier
               )
             )
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           call_expression
            identifier
            argument_list
             (
             identifier
             ,
             identifier
             )
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            null
             NULL
            ,
            null
             NULL
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            identifier
            ,
            binary_expression
             number_literal
             -
             number_literal
            ,
            number_literal
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           binary_expression
            identifier
            ==
            identifier
           ||
           binary_expression
            identifier
            ==
            number_literal
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         subscript_expression
          identifier
          subscript_argument_list
           [
           identifier
           ]
         ERROR
          =
          '
          '
         ;
        }
       while
       parenthesized_expression
        (
        number_literal
        )
       ;
      if_statement
       if
       condition_clause
        (
        binary_expression
         identifier
         !=
         identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           identifier
           )
         ;
        }
      if_statement
       if
       condition_clause
        (
        binary_expression
         identifier
         !=
         identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           identifier
           )
         ;
        }
      if_statement
       if
       condition_clause
        (
        identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           )
         ;
        }
      }
     }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: goodG2B1
translation_unit
 function_definition
  storage_class_specifier
   static
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      !=
      number_literal
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     }
    else_clause
     else
     compound_statement
      {
      expression_statement
       call_expression
        identifier
        argument_list
         (
         identifier
         ,
         string_literal
          "
          "
         )
       ;
      }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: goodG2B2
translation_unit
 function_definition
  storage_class_specifier
   static
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      ==
      number_literal
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        identifier
        ,
        string_literal
         "
         "
        )
      ;
     }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: CWE15_External_Control_of_System_or_Configuration_Setting__w32_03_good
translation_unit
 function_definition
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   expression_statement
    call_expression
     identifier
     argument_list
      (
      )
    ;
   expression_statement
    call_expression
     identifier
     argument_list
      (
      )
    ;
   }

----------------------------------------
Function: CWE15_External_Control_of_System_or_Configuration_Setting__w32_03_bad
translation_unit
 function_definition
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      ==
      number_literal
     )
    compound_statement
     {
     compound_statement
      {
      declaration
       type_identifier
       identifier
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        false
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        identifier
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        identifier
       ;
      declaration
       struct_specifier
        struct
        type_identifier
       identifier
       ;
      declaration
       primitive_type
       identifier
       ;
      do_statement
       do
       compound_statement
        {
        if_statement
         if
         condition_clause
          (
          binary_expression
           call_expression
            identifier
            argument_list
             (
             call_expression
              identifier
              argument_list
               (
               number_literal
               ,
               number_literal
               )
             ,
             pointer_expression
              &
              identifier
             )
           !=
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          number_literal
         ;
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            identifier
            ,
            number_literal
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         call_expression
          identifier
          argument_list
           (
           pointer_expression
            &
            identifier
           ,
           number_literal
           ,
           sizeof_expression
            sizeof
            parenthesized_expression
             (
             identifier
             )
           )
         ;
        expression_statement
         assignment_expression
          field_expression
           identifier
           .
           field_identifier
          =
          identifier
         ;
        expression_statement
         assignment_expression
          field_expression
           field_expression
            identifier
            .
            field_identifier
           .
           field_identifier
          =
          identifier
         ;
        expression_statement
         assignment_expression
          field_expression
           identifier
           .
           field_identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           call_expression
            identifier
            argument_list
             (
             identifier
             ,
             cast_expression
              (
              type_descriptor
               struct_specifier
                struct
                type_identifier
               abstract_pointer_declarator
                *
              )
              pointer_expression
               &
               identifier
             ,
             sizeof_expression
              sizeof
              parenthesized_expression
               (
               identifier
               )
             )
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           call_expression
            identifier
            argument_list
             (
             identifier
             ,
             identifier
             )
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            null
             NULL
            ,
            null
             NULL
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            identifier
            ,
            binary_expression
             number_literal
             -
             number_literal
            ,
            number_literal
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           binary_expression
            identifier
            ==
            identifier
           ||
           binary_expression
            identifier
            ==
            number_literal
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         subscript_expression
          identifier
          subscript_argument_list
           [
           identifier
           ]
         ERROR
          =
          '
          '
         ;
        }
       while
       parenthesized_expression
        (
        number_literal
        )
       ;
      if_statement
       if
       condition_clause
        (
        binary_expression
         identifier
         !=
         identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           identifier
           )
         ;
        }
      if_statement
       if
       condition_clause
        (
        binary_expression
         identifier
         !=
         identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           identifier
           )
         ;
        }
      if_statement
       if
       condition_clause
        (
        identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           )
         ;
        }
      }
     }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: goodG2B1
translation_unit
 function_definition
  storage_class_specifier
   static
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      !=
      number_literal
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     }
    else_clause
     else
     compound_statement
      {
      expression_statement
       call_expression
        identifier
        argument_list
         (
         identifier
         ,
         string_literal
          "
          "
         )
       ;
      }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: goodG2B2
translation_unit
 function_definition
  storage_class_specifier
   static
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      ==
      number_literal
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        identifier
        ,
        string_literal
         "
         "
        )
      ;
     }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: CWE15_External_Control_of_System_or_Configuration_Setting__w32_03_good
translation_unit
 function_definition
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   expression_statement
    call_expression
     identifier
     argument_list
      (
      )
    ;
   expression_statement
    call_expression
     identifier
     argument_list
      (
      )
    ;
   }

----------------------------------------
Function: CWE15_External_Control_of_System_or_Configuration_Setting__w32_03_bad
translation_unit
 function_definition
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      ==
      number_literal
     )
    compound_statement
     {
     compound_statement
      {
      declaration
       type_identifier
       identifier
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        false
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        identifier
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        identifier
       ;
      declaration
       struct_specifier
        struct
        type_identifier
       identifier
       ;
      declaration
       primitive_type
       identifier
       ;
      do_statement
       do
       compound_statement
        {
        if_statement
         if
         condition_clause
          (
          binary_expression
           call_expression
            identifier
            argument_list
             (
             call_expression
              identifier
              argument_list
               (
               number_literal
               ,
               number_literal
               )
             ,
             pointer_expression
              &
              identifier
             )
           !=
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          number_literal
         ;
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            identifier
            ,
            number_literal
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         call_expression
          identifier
          argument_list
           (
           pointer_expression
            &
            identifier
           ,
           number_literal
           ,
           sizeof_expression
            sizeof
            parenthesized_expression
             (
             identifier
             )
           )
         ;
        expression_statement
         assignment_expression
          field_expression
           identifier
           .
           field_identifier
          =
          identifier
         ;
        expression_statement
         assignment_expression
          field_expression
           field_expression
            identifier
            .
            field_identifier
           .
           field_identifier
          =
          identifier
         ;
        expression_statement
         assignment_expression
          field_expression
           identifier
           .
           field_identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           call_expression
            identifier
            argument_list
             (
             identifier
             ,
             cast_expression
              (
              type_descriptor
               struct_specifier
                struct
                type_identifier
               abstract_pointer_declarator
                *
              )
              pointer_expression
               &
               identifier
             ,
             sizeof_expression
              sizeof
              parenthesized_expression
               (
               identifier
               )
             )
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           call_expression
            identifier
            argument_list
             (
             identifier
             ,
             identifier
             )
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            null
             NULL
            ,
            null
             NULL
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            identifier
            ,
            binary_expression
             number_literal
             -
             number_literal
            ,
            number_literal
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           binary_expression
            identifier
            ==
            identifier
           ||
           binary_expression
            identifier
            ==
            number_literal
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         subscript_expression
          identifier
          subscript_argument_list
           [
           identifier
           ]
         ERROR
          =
          '
          '
         ;
        }
       while
       parenthesized_expression
        (
        number_literal
        )
       ;
      if_statement
       if
       condition_clause
        (
        binary_expression
         identifier
         !=
         identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           identifier
           )
         ;
        }
      if_statement
       if
       condition_clause
        (
        binary_expression
         identifier
         !=
         identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           identifier
           )
         ;
        }
      if_statement
       if
       condition_clause
        (
        identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           )
         ;
        }
      }
     }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: goodG2B1
translation_unit
 function_definition
  storage_class_specifier
   static
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      !=
      number_literal
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     }
    else_clause
     else
     compound_statement
      {
      expression_statement
       call_expression
        identifier
        argument_list
         (
         identifier
         ,
         string_literal
          "
          "
         )
       ;
      }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: goodG2B2
translation_unit
 function_definition
  storage_class_specifier
   static
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      ==
      number_literal
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        identifier
        ,
        string_literal
         "
         "
        )
      ;
     }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: CWE15_External_Control_of_System_or_Configuration_Setting__w32_03_good
translation_unit
 function_definition
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   expression_statement
    call_expression
     identifier
     argument_list
      (
      )
    ;
   expression_statement
    call_expression
     identifier
     argument_list
      (
      )
    ;
   }

----------------------------------------
Function: CWE15_External_Control_of_System_or_Configuration_Setting__w32_03_bad
translation_unit
 function_definition
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      ==
      number_literal
     )
    compound_statement
     {
     compound_statement
      {
      declaration
       type_identifier
       identifier
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        false
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        identifier
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        identifier
       ;
      declaration
       struct_specifier
        struct
        type_identifier
       identifier
       ;
      declaration
       primitive_type
       identifier
       ;
      do_statement
       do
       compound_statement
        {
        if_statement
         if
         condition_clause
          (
          binary_expression
           call_expression
            identifier
            argument_list
             (
             call_expression
              identifier
              argument_list
               (
               number_literal
               ,
               number_literal
               )
             ,
             pointer_expression
              &
              identifier
             )
           !=
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          number_literal
         ;
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            identifier
            ,
            number_literal
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         call_expression
          identifier
          argument_list
           (
           pointer_expression
            &
            identifier
           ,
           number_literal
           ,
           sizeof_expression
            sizeof
            parenthesized_expression
             (
             identifier
             )
           )
         ;
        expression_statement
         assignment_expression
          field_expression
           identifier
           .
           field_identifier
          =
          identifier
         ;
        expression_statement
         assignment_expression
          field_expression
           field_expression
            identifier
            .
            field_identifier
           .
           field_identifier
          =
          identifier
         ;
        expression_statement
         assignment_expression
          field_expression
           identifier
           .
           field_identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           call_expression
            identifier
            argument_list
             (
             identifier
             ,
             cast_expression
              (
              type_descriptor
               struct_specifier
                struct
                type_identifier
               abstract_pointer_declarator
                *
              )
              pointer_expression
               &
               identifier
             ,
             sizeof_expression
              sizeof
              parenthesized_expression
               (
               identifier
               )
             )
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           call_expression
            identifier
            argument_list
             (
             identifier
             ,
             identifier
             )
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            null
             NULL
            ,
            null
             NULL
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            identifier
            ,
            binary_expression
             number_literal
             -
             number_literal
            ,
            number_literal
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           binary_expression
            identifier
            ==
            identifier
           ||
           binary_expression
            identifier
            ==
            number_literal
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         subscript_expression
          identifier
          subscript_argument_list
           [
           identifier
           ]
         ERROR
          =
          '
          '
         ;
        }
       while
       parenthesized_expression
        (
        number_literal
        )
       ;
      if_statement
       if
       condition_clause
        (
        binary_expression
         identifier
         !=
         identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           identifier
           )
         ;
        }
      if_statement
       if
       condition_clause
        (
        binary_expression
         identifier
         !=
         identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           identifier
           )
         ;
        }
      if_statement
       if
       condition_clause
        (
        identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           )
         ;
        }
      }
     }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: goodG2B1
translation_unit
 function_definition
  storage_class_specifier
   static
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      !=
      number_literal
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     }
    else_clause
     else
     compound_statement
      {
      expression_statement
       call_expression
        identifier
        argument_list
         (
         identifier
         ,
         string_literal
          "
          "
         )
       ;
      }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: goodG2B2
translation_unit
 function_definition
  storage_class_specifier
   static
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      ==
      number_literal
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        identifier
        ,
        string_literal
         "
         "
        )
      ;
     }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: CWE15_External_Control_of_System_or_Configuration_Setting__w32_03_good
translation_unit
 function_definition
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   expression_statement
    call_expression
     identifier
     argument_list
      (
      )
    ;
   expression_statement
    call_expression
     identifier
     argument_list
      (
      )
    ;
   }

----------------------------------------
Function: CWE15_External_Control_of_System_or_Configuration_Setting__w32_03_bad
translation_unit
 function_definition
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      ==
      number_literal
     )
    compound_statement
     {
     compound_statement
      {
      declaration
       type_identifier
       identifier
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        false
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        identifier
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        identifier
       ;
      declaration
       struct_specifier
        struct
        type_identifier
       identifier
       ;
      declaration
       primitive_type
       identifier
       ;
      do_statement
       do
       compound_statement
        {
        if_statement
         if
         condition_clause
          (
          binary_expression
           call_expression
            identifier
            argument_list
             (
             call_expression
              identifier
              argument_list
               (
               number_literal
               ,
               number_literal
               )
             ,
             pointer_expression
              &
              identifier
             )
           !=
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          number_literal
         ;
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            identifier
            ,
            number_literal
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         call_expression
          identifier
          argument_list
           (
           pointer_expression
            &
            identifier
           ,
           number_literal
           ,
           sizeof_expression
            sizeof
            parenthesized_expression
             (
             identifier
             )
           )
         ;
        expression_statement
         assignment_expression
          field_expression
           identifier
           .
           field_identifier
          =
          identifier
         ;
        expression_statement
         assignment_expression
          field_expression
           field_expression
            identifier
            .
            field_identifier
           .
           field_identifier
          =
          identifier
         ;
        expression_statement
         assignment_expression
          field_expression
           identifier
           .
           field_identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           call_expression
            identifier
            argument_list
             (
             identifier
             ,
             cast_expression
              (
              type_descriptor
               struct_specifier
                struct
                type_identifier
               abstract_pointer_declarator
                *
              )
              pointer_expression
               &
               identifier
             ,
             sizeof_expression
              sizeof
              parenthesized_expression
               (
               identifier
               )
             )
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           call_expression
            identifier
            argument_list
             (
             identifier
             ,
             identifier
             )
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            null
             NULL
            ,
            null
             NULL
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            identifier
            ,
            binary_expression
             number_literal
             -
             number_literal
            ,
            number_literal
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           binary_expression
            identifier
            ==
            identifier
           ||
           binary_expression
            identifier
            ==
            number_literal
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         subscript_expression
          identifier
          subscript_argument_list
           [
           identifier
           ]
         ERROR
          =
          '
          '
         ;
        }
       while
       parenthesized_expression
        (
        number_literal
        )
       ;
      if_statement
       if
       condition_clause
        (
        binary_expression
         identifier
         !=
         identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           identifier
           )
         ;
        }
      if_statement
       if
       condition_clause
        (
        binary_expression
         identifier
         !=
         identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           identifier
           )
         ;
        }
      if_statement
       if
       condition_clause
        (
        identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           )
         ;
        }
      }
     }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: goodG2B1
translation_unit
 function_definition
  storage_class_specifier
   static
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      !=
      number_literal
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     }
    else_clause
     else
     compound_statement
      {
      expression_statement
       call_expression
        identifier
        argument_list
         (
         identifier
         ,
         string_literal
          "
          "
         )
       ;
      }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: goodG2B2
translation_unit
 function_definition
  storage_class_specifier
   static
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      ==
      number_literal
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        identifier
        ,
        string_literal
         "
         "
        )
      ;
     }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: CWE15_External_Control_of_System_or_Configuration_Setting__w32_03_good
translation_unit
 function_definition
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   expression_statement
    call_expression
     identifier
     argument_list
      (
      )
    ;
   expression_statement
    call_expression
     identifier
     argument_list
      (
      )
    ;
   }

----------------------------------------
Function: CWE15_External_Control_of_System_or_Configuration_Setting__w32_03_bad
translation_unit
 function_definition
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      ==
      number_literal
     )
    compound_statement
     {
     compound_statement
      {
      declaration
       type_identifier
       identifier
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        false
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        identifier
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        identifier
       ;
      declaration
       struct_specifier
        struct
        type_identifier
       identifier
       ;
      declaration
       primitive_type
       identifier
       ;
      do_statement
       do
       compound_statement
        {
        if_statement
         if
         condition_clause
          (
          binary_expression
           call_expression
            identifier
            argument_list
             (
             call_expression
              identifier
              argument_list
               (
               number_literal
               ,
               number_literal
               )
             ,
             pointer_expression
              &
              identifier
             )
           !=
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          number_literal
         ;
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            identifier
            ,
            number_literal
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         call_expression
          identifier
          argument_list
           (
           pointer_expression
            &
            identifier
           ,
           number_literal
           ,
           sizeof_expression
            sizeof
            parenthesized_expression
             (
             identifier
             )
           )
         ;
        expression_statement
         assignment_expression
          field_expression
           identifier
           .
           field_identifier
          =
          identifier
         ;
        expression_statement
         assignment_expression
          field_expression
           field_expression
            identifier
            .
            field_identifier
           .
           field_identifier
          =
          identifier
         ;
        expression_statement
         assignment_expression
          field_expression
           identifier
           .
           field_identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           call_expression
            identifier
            argument_list
             (
             identifier
             ,
             cast_expression
              (
              type_descriptor
               struct_specifier
                struct
                type_identifier
               abstract_pointer_declarator
                *
              )
              pointer_expression
               &
               identifier
             ,
             sizeof_expression
              sizeof
              parenthesized_expression
               (
               identifier
               )
             )
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           call_expression
            identifier
            argument_list
             (
             identifier
             ,
             identifier
             )
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            null
             NULL
            ,
            null
             NULL
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            identifier
            ,
            binary_expression
             number_literal
             -
             number_literal
            ,
            number_literal
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           binary_expression
            identifier
            ==
            identifier
           ||
           binary_expression
            identifier
            ==
            number_literal
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         subscript_expression
          identifier
          subscript_argument_list
           [
           identifier
           ]
         ERROR
          =
          '
          '
         ;
        }
       while
       parenthesized_expression
        (
        number_literal
        )
       ;
      if_statement
       if
       condition_clause
        (
        binary_expression
         identifier
         !=
         identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           identifier
           )
         ;
        }
      if_statement
       if
       condition_clause
        (
        binary_expression
         identifier
         !=
         identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           identifier
           )
         ;
        }
      if_statement
       if
       condition_clause
        (
        identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           )
         ;
        }
      }
     }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: CWE15_External_Control_of_System_or_Configuration_Setting__w32_03_bad
translation_unit
 function_definition
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      ==
      number_literal
     )
    compound_statement
     {
     compound_statement
      {
      declaration
       type_identifier
       identifier
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        false
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        identifier
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        identifier
       ;
      declaration
       struct_specifier
        struct
        type_identifier
       identifier
       ;
      declaration
       primitive_type
       identifier
       ;
      do_statement
       do
       compound_statement
        {
        if_statement
         if
         condition_clause
          (
          binary_expression
           call_expression
            identifier
            argument_list
             (
             call_expression
              identifier
              argument_list
               (
               number_literal
               ,
               number_literal
               )
             ,
             pointer_expression
              &
              identifier
             )
           !=
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          number_literal
         ;
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            identifier
            ,
            number_literal
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         call_expression
          identifier
          argument_list
           (
           pointer_expression
            &
            identifier
           ,
           number_literal
           ,
           sizeof_expression
            sizeof
            parenthesized_expression
             (
             identifier
             )
           )
         ;
        expression_statement
         assignment_expression
          field_expression
           identifier
           .
           field_identifier
          =
          identifier
         ;
        expression_statement
         assignment_expression
          field_expression
           field_expression
            identifier
            .
            field_identifier
           .
           field_identifier
          =
          identifier
         ;
        expression_statement
         assignment_expression
          field_expression
           identifier
           .
           field_identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           call_expression
            identifier
            argument_list
             (
             identifier
             ,
             cast_expression
              (
              type_descriptor
               struct_specifier
                struct
                type_identifier
               abstract_pointer_declarator
                *
              )
              pointer_expression
               &
               identifier
             ,
             sizeof_expression
              sizeof
              parenthesized_expression
               (
               identifier
               )
             )
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           call_expression
            identifier
            argument_list
             (
             identifier
             ,
             identifier
             )
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            null
             NULL
            ,
            null
             NULL
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            identifier
            ,
            binary_expression
             number_literal
             -
             number_literal
            ,
            number_literal
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           binary_expression
            identifier
            ==
            identifier
           ||
           binary_expression
            identifier
            ==
            number_literal
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         subscript_expression
          identifier
          subscript_argument_list
           [
           identifier
           ]
         ERROR
          =
          '
          '
         ;
        }
       while
       parenthesized_expression
        (
        number_literal
        )
       ;
      if_statement
       if
       condition_clause
        (
        binary_expression
         identifier
         !=
         identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           identifier
           )
         ;
        }
      if_statement
       if
       condition_clause
        (
        binary_expression
         identifier
         !=
         identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           identifier
           )
         ;
        }
      if_statement
       if
       condition_clause
        (
        identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           )
         ;
        }
      }
     }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: goodG2B1
translation_unit
 function_definition
  storage_class_specifier
   static
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      !=
      number_literal
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     }
    else_clause
     else
     compound_statement
      {
      expression_statement
       call_expression
        identifier
        argument_list
         (
         identifier
         ,
         string_literal
          "
          "
         )
       ;
      }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: goodG2B2
translation_unit
 function_definition
  storage_class_specifier
   static
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      ==
      number_literal
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        identifier
        ,
        string_literal
         "
         "
        )
      ;
     }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: CWE15_External_Control_of_System_or_Configuration_Setting__w32_03_good
translation_unit
 function_definition
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   expression_statement
    call_expression
     identifier
     argument_list
      (
      )
    ;
   expression_statement
    call_expression
     identifier
     argument_list
      (
      )
    ;
   }

----------------------------------------
Function: CWE15_External_Control_of_System_or_Configuration_Setting__w32_03_bad
translation_unit
 function_definition
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      ==
      number_literal
     )
    compound_statement
     {
     compound_statement
      {
      declaration
       type_identifier
       identifier
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        false
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        identifier
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        identifier
       ;
      declaration
       struct_specifier
        struct
        type_identifier
       identifier
       ;
      declaration
       primitive_type
       identifier
       ;
      do_statement
       do
       compound_statement
        {
        if_statement
         if
         condition_clause
          (
          binary_expression
           call_expression
            identifier
            argument_list
             (
             call_expression
              identifier
              argument_list
               (
               number_literal
               ,
               number_literal
               )
             ,
             pointer_expression
              &
              identifier
             )
           !=
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          number_literal
         ;
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            identifier
            ,
            number_literal
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         call_expression
          identifier
          argument_list
           (
           pointer_expression
            &
            identifier
           ,
           number_literal
           ,
           sizeof_expression
            sizeof
            parenthesized_expression
             (
             identifier
             )
           )
         ;
        expression_statement
         assignment_expression
          field_expression
           identifier
           .
           field_identifier
          =
          identifier
         ;
        expression_statement
         assignment_expression
          field_expression
           field_expression
            identifier
            .
            field_identifier
           .
           field_identifier
          =
          identifier
         ;
        expression_statement
         assignment_expression
          field_expression
           identifier
           .
           field_identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           call_expression
            identifier
            argument_list
             (
             identifier
             ,
             cast_expression
              (
              type_descriptor
               struct_specifier
                struct
                type_identifier
               abstract_pointer_declarator
                *
              )
              pointer_expression
               &
               identifier
             ,
             sizeof_expression
              sizeof
              parenthesized_expression
               (
               identifier
               )
             )
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           call_expression
            identifier
            argument_list
             (
             identifier
             ,
             identifier
             )
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            null
             NULL
            ,
            null
             NULL
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            identifier
            ,
            binary_expression
             number_literal
             -
             number_literal
            ,
            number_literal
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           binary_expression
            identifier
            ==
            identifier
           ||
           binary_expression
            identifier
            ==
            number_literal
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         subscript_expression
          identifier
          subscript_argument_list
           [
           identifier
           ]
         ERROR
          =
          '
          '
         ;
        }
       while
       parenthesized_expression
        (
        number_literal
        )
       ;
      if_statement
       if
       condition_clause
        (
        binary_expression
         identifier
         !=
         identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           identifier
           )
         ;
        }
      if_statement
       if
       condition_clause
        (
        binary_expression
         identifier
         !=
         identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           identifier
           )
         ;
        }
      if_statement
       if
       condition_clause
        (
        identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           )
         ;
        }
      }
     }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: goodG2B1
translation_unit
 function_definition
  storage_class_specifier
   static
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      !=
      number_literal
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     }
    else_clause
     else
     compound_statement
      {
      expression_statement
       call_expression
        identifier
        argument_list
         (
         identifier
         ,
         string_literal
          "
          "
         )
       ;
      }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: goodG2B2
translation_unit
 function_definition
  storage_class_specifier
   static
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      ==
      number_literal
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        identifier
        ,
        string_literal
         "
         "
        )
      ;
     }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: CWE15_External_Control_of_System_or_Configuration_Setting__w32_03_good
translation_unit
 function_definition
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   expression_statement
    call_expression
     identifier
     argument_list
      (
      )
    ;
   expression_statement
    call_expression
     identifier
     argument_list
      (
      )
    ;
   }

----------------------------------------
Function: CWE15_External_Control_of_System_or_Configuration_Setting__w32_03_bad
translation_unit
 function_definition
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      ==
      number_literal
     )
    compound_statement
     {
     compound_statement
      {
      declaration
       type_identifier
       identifier
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        false
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        identifier
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        identifier
       ;
      declaration
       struct_specifier
        struct
        type_identifier
       identifier
       ;
      declaration
       primitive_type
       identifier
       ;
      do_statement
       do
       compound_statement
        {
        if_statement
         if
         condition_clause
          (
          binary_expression
           call_expression
            identifier
            argument_list
             (
             call_expression
              identifier
              argument_list
               (
               number_literal
               ,
               number_literal
               )
             ,
             pointer_expression
              &
              identifier
             )
           !=
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          number_literal
         ;
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            identifier
            ,
            number_literal
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         call_expression
          identifier
          argument_list
           (
           pointer_expression
            &
            identifier
           ,
           number_literal
           ,
           sizeof_expression
            sizeof
            parenthesized_expression
             (
             identifier
             )
           )
         ;
        expression_statement
         assignment_expression
          field_expression
           identifier
           .
           field_identifier
          =
          identifier
         ;
        expression_statement
         assignment_expression
          field_expression
           field_expression
            identifier
            .
            field_identifier
           .
           field_identifier
          =
          identifier
         ;
        expression_statement
         assignment_expression
          field_expression
           identifier
           .
           field_identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           call_expression
            identifier
            argument_list
             (
             identifier
             ,
             cast_expression
              (
              type_descriptor
               struct_specifier
                struct
                type_identifier
               abstract_pointer_declarator
                *
              )
              pointer_expression
               &
               identifier
             ,
             sizeof_expression
              sizeof
              parenthesized_expression
               (
               identifier
               )
             )
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           call_expression
            identifier
            argument_list
             (
             identifier
             ,
             identifier
             )
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            null
             NULL
            ,
            null
             NULL
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            identifier
            ,
            binary_expression
             number_literal
             -
             number_literal
            ,
            number_literal
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           binary_expression
            identifier
            ==
            identifier
           ||
           binary_expression
            identifier
            ==
            number_literal
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         subscript_expression
          identifier
          subscript_argument_list
           [
           identifier
           ]
         ERROR
          =
          '
          '
         ;
        }
       while
       parenthesized_expression
        (
        number_literal
        )
       ;
      if_statement
       if
       condition_clause
        (
        binary_expression
         identifier
         !=
         identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           identifier
           )
         ;
        }
      if_statement
       if
       condition_clause
        (
        binary_expression
         identifier
         !=
         identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           identifier
           )
         ;
        }
      if_statement
       if
       condition_clause
        (
        identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           )
         ;
        }
      }
     }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: goodG2B1
translation_unit
 function_definition
  storage_class_specifier
   static
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      !=
      number_literal
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     }
    else_clause
     else
     compound_statement
      {
      expression_statement
       call_expression
        identifier
        argument_list
         (
         identifier
         ,
         string_literal
          "
          "
         )
       ;
      }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: goodG2B2
translation_unit
 function_definition
  storage_class_specifier
   static
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      ==
      number_literal
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        identifier
        ,
        string_literal
         "
         "
        )
      ;
     }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: CWE15_External_Control_of_System_or_Configuration_Setting__w32_03_good
translation_unit
 function_definition
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   expression_statement
    call_expression
     identifier
     argument_list
      (
      )
    ;
   expression_statement
    call_expression
     identifier
     argument_list
      (
      )
    ;
   }

----------------------------------------
Function: CWE15_External_Control_of_System_or_Configuration_Setting__w32_03_bad
translation_unit
 function_definition
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      ==
      number_literal
     )
    compound_statement
     {
     compound_statement
      {
      declaration
       type_identifier
       identifier
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        false
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        identifier
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        identifier
       ;
      declaration
       struct_specifier
        struct
        type_identifier
       identifier
       ;
      declaration
       primitive_type
       identifier
       ;
      do_statement
       do
       compound_statement
        {
        if_statement
         if
         condition_clause
          (
          binary_expression
           call_expression
            identifier
            argument_list
             (
             call_expression
              identifier
              argument_list
               (
               number_literal
               ,
               number_literal
               )
             ,
             pointer_expression
              &
              identifier
             )
           !=
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          number_literal
         ;
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            identifier
            ,
            number_literal
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         call_expression
          identifier
          argument_list
           (
           pointer_expression
            &
            identifier
           ,
           number_literal
           ,
           sizeof_expression
            sizeof
            parenthesized_expression
             (
             identifier
             )
           )
         ;
        expression_statement
         assignment_expression
          field_expression
           identifier
           .
           field_identifier
          =
          identifier
         ;
        expression_statement
         assignment_expression
          field_expression
           field_expression
            identifier
            .
            field_identifier
           .
           field_identifier
          =
          identifier
         ;
        expression_statement
         assignment_expression
          field_expression
           identifier
           .
           field_identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           call_expression
            identifier
            argument_list
             (
             identifier
             ,
             cast_expression
              (
              type_descriptor
               struct_specifier
                struct
                type_identifier
               abstract_pointer_declarator
                *
              )
              pointer_expression
               &
               identifier
             ,
             sizeof_expression
              sizeof
              parenthesized_expression
               (
               identifier
               )
             )
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           call_expression
            identifier
            argument_list
             (
             identifier
             ,
             identifier
             )
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            null
             NULL
            ,
            null
             NULL
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            identifier
            ,
            binary_expression
             number_literal
             -
             number_literal
            ,
            number_literal
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           binary_expression
            identifier
            ==
            identifier
           ||
           binary_expression
            identifier
            ==
            number_literal
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         subscript_expression
          identifier
          subscript_argument_list
           [
           identifier
           ]
         ERROR
          =
          '
          '
         ;
        }
       while
       parenthesized_expression
        (
        number_literal
        )
       ;
      if_statement
       if
       condition_clause
        (
        binary_expression
         identifier
         !=
         identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           identifier
           )
         ;
        }
      if_statement
       if
       condition_clause
        (
        binary_expression
         identifier
         !=
         identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           identifier
           )
         ;
        }
      if_statement
       if
       condition_clause
        (
        identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           )
         ;
        }
      }
     }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: goodG2B1
translation_unit
 function_definition
  storage_class_specifier
   static
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      !=
      number_literal
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     }
    else_clause
     else
     compound_statement
      {
      expression_statement
       call_expression
        identifier
        argument_list
         (
         identifier
         ,
         string_literal
          "
          "
         )
       ;
      }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: goodG2B2
translation_unit
 function_definition
  storage_class_specifier
   static
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      ==
      number_literal
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        identifier
        ,
        string_literal
         "
         "
        )
      ;
     }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: CWE15_External_Control_of_System_or_Configuration_Setting__w32_03_good
translation_unit
 function_definition
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   expression_statement
    call_expression
     identifier
     argument_list
      (
      )
    ;
   expression_statement
    call_expression
     identifier
     argument_list
      (
      )
    ;
   }

----------------------------------------
Function: CWE15_External_Control_of_System_or_Configuration_Setting__w32_03_bad
translation_unit
 function_definition
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      ==
      number_literal
     )
    compound_statement
     {
     compound_statement
      {
      declaration
       type_identifier
       identifier
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        false
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        identifier
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        identifier
       ;
      declaration
       struct_specifier
        struct
        type_identifier
       identifier
       ;
      declaration
       primitive_type
       identifier
       ;
      do_statement
       do
       compound_statement
        {
        if_statement
         if
         condition_clause
          (
          binary_expression
           call_expression
            identifier
            argument_list
             (
             call_expression
              identifier
              argument_list
               (
               number_literal
               ,
               number_literal
               )
             ,
             pointer_expression
              &
              identifier
             )
           !=
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          number_literal
         ;
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            identifier
            ,
            number_literal
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         call_expression
          identifier
          argument_list
           (
           pointer_expression
            &
            identifier
           ,
           number_literal
           ,
           sizeof_expression
            sizeof
            parenthesized_expression
             (
             identifier
             )
           )
         ;
        expression_statement
         assignment_expression
          field_expression
           identifier
           .
           field_identifier
          =
          identifier
         ;
        expression_statement
         assignment_expression
          field_expression
           field_expression
            identifier
            .
            field_identifier
           .
           field_identifier
          =
          identifier
         ;
        expression_statement
         assignment_expression
          field_expression
           identifier
           .
           field_identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           call_expression
            identifier
            argument_list
             (
             identifier
             ,
             cast_expression
              (
              type_descriptor
               struct_specifier
                struct
                type_identifier
               abstract_pointer_declarator
                *
              )
              pointer_expression
               &
               identifier
             ,
             sizeof_expression
              sizeof
              parenthesized_expression
               (
               identifier
               )
             )
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           call_expression
            identifier
            argument_list
             (
             identifier
             ,
             identifier
             )
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            null
             NULL
            ,
            null
             NULL
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            identifier
            ,
            binary_expression
             number_literal
             -
             number_literal
            ,
            number_literal
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           binary_expression
            identifier
            ==
            identifier
           ||
           binary_expression
            identifier
            ==
            number_literal
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         subscript_expression
          identifier
          subscript_argument_list
           [
           identifier
           ]
         ERROR
          =
          '
          '
         ;
        }
       while
       parenthesized_expression
        (
        number_literal
        )
       ;
      if_statement
       if
       condition_clause
        (
        binary_expression
         identifier
         !=
         identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           identifier
           )
         ;
        }
      if_statement
       if
       condition_clause
        (
        binary_expression
         identifier
         !=
         identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           identifier
           )
         ;
        }
      if_statement
       if
       condition_clause
        (
        identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           )
         ;
        }
      }
     }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: goodG2B1
translation_unit
 function_definition
  storage_class_specifier
   static
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      !=
      number_literal
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     }
    else_clause
     else
     compound_statement
      {
      expression_statement
       call_expression
        identifier
        argument_list
         (
         identifier
         ,
         string_literal
          "
          "
         )
       ;
      }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: goodG2B2
translation_unit
 function_definition
  storage_class_specifier
   static
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      ==
      number_literal
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        identifier
        ,
        string_literal
         "
         "
        )
      ;
     }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: CWE15_External_Control_of_System_or_Configuration_Setting__w32_03_good
translation_unit
 function_definition
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   expression_statement
    call_expression
     identifier
     argument_list
      (
      )
    ;
   expression_statement
    call_expression
     identifier
     argument_list
      (
      )
    ;
   }

----------------------------------------
Function: CWE15_External_Control_of_System_or_Configuration_Setting__w32_03_bad
translation_unit
 function_definition
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      ==
      number_literal
     )
    compound_statement
     {
     compound_statement
      {
      declaration
       type_identifier
       identifier
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        false
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        identifier
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        identifier
       ;
      declaration
       struct_specifier
        struct
        type_identifier
       identifier
       ;
      declaration
       primitive_type
       identifier
       ;
      do_statement
       do
       compound_statement
        {
        if_statement
         if
         condition_clause
          (
          binary_expression
           call_expression
            identifier
            argument_list
             (
             call_expression
              identifier
              argument_list
               (
               number_literal
               ,
               number_literal
               )
             ,
             pointer_expression
              &
              identifier
             )
           !=
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          number_literal
         ;
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            identifier
            ,
            number_literal
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         call_expression
          identifier
          argument_list
           (
           pointer_expression
            &
            identifier
           ,
           number_literal
           ,
           sizeof_expression
            sizeof
            parenthesized_expression
             (
             identifier
             )
           )
         ;
        expression_statement
         assignment_expression
          field_expression
           identifier
           .
           field_identifier
          =
          identifier
         ;
        expression_statement
         assignment_expression
          field_expression
           field_expression
            identifier
            .
            field_identifier
           .
           field_identifier
          =
          identifier
         ;
        expression_statement
         assignment_expression
          field_expression
           identifier
           .
           field_identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           call_expression
            identifier
            argument_list
             (
             identifier
             ,
             cast_expression
              (
              type_descriptor
               struct_specifier
                struct
                type_identifier
               abstract_pointer_declarator
                *
              )
              pointer_expression
               &
               identifier
             ,
             sizeof_expression
              sizeof
              parenthesized_expression
               (
               identifier
               )
             )
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           call_expression
            identifier
            argument_list
             (
             identifier
             ,
             identifier
             )
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            null
             NULL
            ,
            null
             NULL
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            identifier
            ,
            binary_expression
             number_literal
             -
             number_literal
            ,
            number_literal
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           binary_expression
            identifier
            ==
            identifier
           ||
           binary_expression
            identifier
            ==
            number_literal
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         subscript_expression
          identifier
          subscript_argument_list
           [
           identifier
           ]
         ERROR
          =
          '
          '
         ;
        }
       while
       parenthesized_expression
        (
        number_literal
        )
       ;
      if_statement
       if
       condition_clause
        (
        binary_expression
         identifier
         !=
         identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           identifier
           )
         ;
        }
      if_statement
       if
       condition_clause
        (
        binary_expression
         identifier
         !=
         identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           identifier
           )
         ;
        }
      if_statement
       if
       condition_clause
        (
        identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           )
         ;
        }
      }
     }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: goodG2B1
translation_unit
 function_definition
  storage_class_specifier
   static
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      !=
      number_literal
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     }
    else_clause
     else
     compound_statement
      {
      expression_statement
       call_expression
        identifier
        argument_list
         (
         identifier
         ,
         string_literal
          "
          "
         )
       ;
      }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: goodG2B2
translation_unit
 function_definition
  storage_class_specifier
   static
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      ==
      number_literal
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        identifier
        ,
        string_literal
         "
         "
        )
      ;
     }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: CWE15_External_Control_of_System_or_Configuration_Setting__w32_03_good
translation_unit
 function_definition
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   expression_statement
    call_expression
     identifier
     argument_list
      (
      )
    ;
   expression_statement
    call_expression
     identifier
     argument_list
      (
      )
    ;
   }

----------------------------------------
Function: CWE15_External_Control_of_System_or_Configuration_Setting__w32_03_bad
translation_unit
 function_definition
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      ==
      number_literal
     )
    compound_statement
     {
     compound_statement
      {
      declaration
       type_identifier
       identifier
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        false
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        identifier
       ;
      declaration
       type_identifier
       init_declarator
        identifier
        =
        identifier
       ;
      declaration
       struct_specifier
        struct
        type_identifier
       identifier
       ;
      declaration
       primitive_type
       identifier
       ;
      do_statement
       do
       compound_statement
        {
        if_statement
         if
         condition_clause
          (
          binary_expression
           call_expression
            identifier
            argument_list
             (
             call_expression
              identifier
              argument_list
               (
               number_literal
               ,
               number_literal
               )
             ,
             pointer_expression
              &
              identifier
             )
           !=
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          number_literal
         ;
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            identifier
            ,
            number_literal
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         call_expression
          identifier
          argument_list
           (
           pointer_expression
            &
            identifier
           ,
           number_literal
           ,
           sizeof_expression
            sizeof
            parenthesized_expression
             (
             identifier
             )
           )
         ;
        expression_statement
         assignment_expression
          field_expression
           identifier
           .
           field_identifier
          =
          identifier
         ;
        expression_statement
         assignment_expression
          field_expression
           field_expression
            identifier
            .
            field_identifier
           .
           field_identifier
          =
          identifier
         ;
        expression_statement
         assignment_expression
          field_expression
           identifier
           .
           field_identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           call_expression
            identifier
            argument_list
             (
             identifier
             ,
             cast_expression
              (
              type_descriptor
               struct_specifier
                struct
                type_identifier
               abstract_pointer_declarator
                *
              )
              pointer_expression
               &
               identifier
             ,
             sizeof_expression
              sizeof
              parenthesized_expression
               (
               identifier
               )
             )
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           call_expression
            identifier
            argument_list
             (
             identifier
             ,
             identifier
             )
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            null
             NULL
            ,
            null
             NULL
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           identifier
           ==
           identifier
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         assignment_expression
          identifier
          =
          call_expression
           identifier
           argument_list
            (
            identifier
            ,
            identifier
            ,
            binary_expression
             number_literal
             -
             number_literal
            ,
            number_literal
            )
         ;
        if_statement
         if
         condition_clause
          (
          binary_expression
           binary_expression
            identifier
            ==
            identifier
           ||
           binary_expression
            identifier
            ==
            number_literal
          )
         compound_statement
          {
          break_statement
           break
           ;
          }
        expression_statement
         subscript_expression
          identifier
          subscript_argument_list
           [
           identifier
           ]
         ERROR
          =
          '
          '
         ;
        }
       while
       parenthesized_expression
        (
        number_literal
        )
       ;
      if_statement
       if
       condition_clause
        (
        binary_expression
         identifier
         !=
         identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           identifier
           )
         ;
        }
      if_statement
       if
       condition_clause
        (
        binary_expression
         identifier
         !=
         identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           identifier
           )
         ;
        }
      if_statement
       if
       condition_clause
        (
        identifier
        )
       compound_statement
        {
        expression_statement
         call_expression
          identifier
          argument_list
           (
           )
         ;
        }
      }
     }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: goodG2B1
translation_unit
 function_definition
  storage_class_specifier
   static
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      !=
      number_literal
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     }
    else_clause
     else
     compound_statement
      {
      expression_statement
       call_expression
        identifier
        argument_list
         (
         identifier
         ,
         string_literal
          "
          "
         )
       ;
      }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: goodG2B2
translation_unit
 function_definition
  storage_class_specifier
   static
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   declaration
    primitive_type
    pointer_declarator
     *
     identifier
    ;
   declaration
    primitive_type
    init_declarator
     array_declarator
      identifier
      [
      number_literal
      ]
     =
     string_literal
      "
      "
    ;
   expression_statement
    assignment_expression
     identifier
     =
     identifier
    ;
   if_statement
    if
    condition_clause
     (
     binary_expression
      number_literal
      ==
      number_literal
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        identifier
        ,
        string_literal
         "
         "
        )
      ;
     }
   if_statement
    if
    condition_clause
     (
     unary_expression
      !
      call_expression
       identifier
       argument_list
        (
        identifier
        )
     )
    compound_statement
     {
     expression_statement
      call_expression
       identifier
       argument_list
        (
        string_literal
         "
         "
        )
      ;
     expression_statement
      call_expression
       identifier
       argument_list
        (
        number_literal
        )
      ;
     }
   }

----------------------------------------
Function: CWE15_External_Control_of_System_or_Configuration_Setting__w32_03_good
translation_unit
 function_definition
  primitive_type
  function_declarator
   identifier
   parameter_list
    (
    )
  compound_statement
   {
   expression_statement
    call_expression
     identifier
     argument_list
      (
      )
    ;
   expression_statement
    call_expression
     identifier
     argument_list
      (
      )
    ;
   }

----------------------------------------
